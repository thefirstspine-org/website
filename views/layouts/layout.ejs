<!DOCTYPE html>
<html>
  <head>
    <title>The First Spine</title>

    <!-- Viewport mobile tag for sensible mobile support -->
    <meta name="viewport" content="width=device-width, initial-scale=1, maximum-scale=1">

    <%/* If you want to discourage search engines from indexing this site, uncomment the following line: */%>
    <%/* <meta name="robots" content="noindex"> */%>


    <!--
        Stylesheets and Preprocessors
        ==============================

        You can always bring in CSS files manually with `<link>` tags, or asynchronously
        using a solution like AMD (RequireJS).  Or, if you like, you can take advantage
        of Sails' conventional asset pipeline (boilerplate Gruntfile).

        By default, stylesheets from your `assets/styles` folder are included
        here automatically (between STYLES and STYLES END). Both CSS (.css) and LESS (.less)
        are supported. In production, your styles will be minified and concatenated into
        a single file.

        To customize any part of the built-in behavior, just edit `tasks/pipeline.js`.
        For example, here are a few things you could do:

            + Change the order of your CSS files
            + Import stylesheets from other directories
            + Use a different or additional preprocessor, like SASS, SCSS or Stylus
    -->

    <!--STYLES-->
    <link rel="stylesheet" href="/styles/importer.css">
    <!--STYLES END-->
    <% if(typeof(solidPancakeUrl) !== 'undefined') { %>
      <script src="<%= solidPancakeUrl %>/sirup.js"></script>
      <script>sirup.persistantSession('tfs-website', navigator.platform).then(() => { sirup.event('viewPage', 'navigation', document.location.href); })</script>
    <% } %>
    <script>
      function checkservice(uri) {
        fetch(uri)
            .then(() => {
              document
                .getElementById(`status--${uri}`)
                .innerHTML = ('<span class="has-text-success"><i class="fas fa-check-circle"></i></span>')
            })
            .catch(() => {
              document
                .getElementById(`status--${uri}`)
                .innerHTML = ('<span class="has-text-danger"><i class="fas fa-times-circle"></i></span>')
            })
          document.write(`<ins id="status--${uri}"></ins>`)
      }
    </script>
    <script src="https://cdn.jsdelivr.net/npm/vue/dist/vue.js"></script>
  </head>

  <body>
    <nav class="navbar is-fixed-top is-tfs">
      <div class="container">
        <div class="navbar-brand">
          <a class="navbar-burger burger">
            <span aria-hidden="true"></span>
            <span aria-hidden="true"></span>
            <span aria-hidden="true"></span>
          </a>
        </div>
        <div class="navbar-menu">
          <div class="navbar-start">
            <a href="/" class="navbar-item">
              Accueil
            </a>
            <div class="navbar-item has-dropdown is-hoverable">
              <a class="navbar-link" href="/play">Jouer</a>
              <div class="navbar-dropdown">
                <a href="/arena" class="navbar-item">
                  Jouer en ligne
                </a>
                <hr class="navbar-divider">
                <a href="/pnp" class="navbar-item" disabled>
                  Jouer à la version PnP
                </a>
              </div>
            </div>
            <a href="/about" class="navbar-item" disabled>
              A propos
            </a>
            <a href="/blog" class="navbar-item" disabled>
              Actualités
            </a>
            <a href="/events" class="navbar-item" disabled>
              Evenements
            </a>
          </div>
          <% if(typeof(user_id) === 'undefined' || !user_id) { %>
            <div class="navbar-end">
              <a href="/login" class="navbar-brand">
                <img src="/images/menu-login.png" />
              </a>
              <a href="/login" class="navbar-item">
                Connexion
              </a>
            </div>
          <% } else { %>
            <div class="navbar-end">
              <a href="/profile" class="navbar-brand">
                <img src="/images/menu-login.png" />
              </a>
              <a href="/profile" class="navbar-item">
                Votre compte
              </a>
            </div>
          <% } %>
        </div>
      </div>
    </nav>

    <div id="app">
      <%- body %>
    </div>

    <%- include('../components/card.ejs'); %>
    <%- include('../components/codeinput.ejs'); %>
    <script>
      var app = new Vue({
        el: '#app'
      })
    </script>

    <footer>
      <div class="container">
        <div class="columns">
          <div class="column">
            <h4 class="has-text-primary is-uppercase">Restons connectés</h4>
            <ul>
              <li>
                <a href="https://fb.com/thefirstspine" class="button is-facebook">
                  <i class="fab fa-facebook-square"></i>
                </a>
              </li>
            </ul>
          </div>
          <div class="column">
            <h4 class="has-text-primary is-uppercase">Explorer</h4>
            <ul>
              <li><a href="/arena">Jouer en ligne</a></li>
              <li><a href="/pnp" disabled>Jouer à la version PnP</a></li>
              <li><a href="/about" disabled>A propos</a></li>
              <li><a href="/events" disabled>Evenements</a></li>
            </ul>
          </div>
          <div class="column">
            <h4 class="has-text-primary is-uppercase">Restez informés</h4>
            <ul>
              <% footer.news.forEach(function(newsItem) { %>
                <li><a href="/blog/<%= newsItem.slug %>"><%= newsItem.title %></a></li>
              <% }) %>
            </ul>
          </div>
        </div>
      </div>
    </footer>



    <!--
        Client-side Templates
        ========================

        HTML templates are important prerequisites of modern, rich client applications.
        To work their magic, frameworks like React, Vue.js, Angular, Ember, and Backbone
        require that you load these templates client-side.

        By default, your Gruntfile is configured to automatically load and precompile
        client-side JST templates in your `assets/templates` folder, then
        include them here automatically (between TEMPLATES and TEMPLATES END).

        To customize this behavior to fit your needs, just edit `tasks/pipeline.js`.
        For example, here are a few things you could do:

            + Import templates from other directories
            + Use a different view engine (handlebars, dust, pug/jade, etc.)
            + Internationalize your client-side templates using a server-side
              stringfile before they're served.
    -->

    <!--TEMPLATES-->
    <!--TEMPLATES END-->


    <!--
        Server-side View Locals
        ========================

        Sometimes, it's convenient to get access to your server-side view locals from
        client-side JavaScript.  This can improve page load times, remove the need for
        extra AJAX requests, and make your client-side code easier to understand and
        to maintain.  Sails provides a simple mechanism for accessing dynamic view
        locals: the "exposeLocalsToBrowser()" view partial.

        For more information on using this built-in feature, see:
        https://sailsjs.com/docs/concepts/views/locals#?escaping-untrusted-data-using-exposelocalstobrowser

    -->


    <!--

      Client-side Javascript
      ========================

      You can always bring in JS files manually with `script` tags, or asynchronously
      on the client using a solution like AMD (RequireJS).  Or, if you like, you can
      take advantage of Sails' conventional asset pipeline (boilerplate Gruntfile).

      By default, files in your `assets/js` folder are included here
      automatically (between SCRIPTS and SCRIPTS END).  Both JavaScript (.js) and
      CoffeeScript (.coffee) are supported. In production, your scripts will be minified
      and concatenated into a single file.

      To customize any part of the built-in behavior, just edit `tasks/pipeline.js`.
      For example, here are a few things you could do:

          + Change the order of your scripts
          + Import scripts from other directories
          + Use a different preprocessor, like TypeScript

    -->

    <!--SCRIPTS-->
    <script src="/dependencies/sails.io.js"></script>
    <!--SCRIPTS END-->
    <script src="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/5.11.2/js/all.min.js"></script>
  </body>
</html>
